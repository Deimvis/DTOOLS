#!/usr/bin/env python3
import argparse
import logging
import os
import telebot
import subprocess as sp
import sys

MAX_TG_MESSAGE_LENGTH = 4096
TG_CHAT_ID = os.getenv('ALERT_TG_CHAT_ID')
TG_BOT_TOKEN = os.getenv('ALERT_TG_BOT_TOKEN')
assert TG_CHAT_ID is not None
assert TG_BOT_TOKEN is not None
TG_BOT = telebot.TeleBot(TG_BOT_TOKEN)

assert TG_CHAT_ID != ''
assert TG_BOT_TOKEN != ''


logging.basicConfig(
    level=logging.DEBUG,
    format='%(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
    datefmt="%d/%b/%Y %H:%M:%S",
)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--tg', action='store_true', default=True)
    parser.add_argument('--shell', action='store_true', default=False)
    return parser.parse_known_args()


def send_long_message(bot: telebot.TeleBot, chat_id: int, msg_text: str, chunk_size=MAX_TG_MESSAGE_LENGTH, **send_message_kwargs):
    for chunk_start_ind in range(0, len(msg_text), chunk_size):
        chunk_end_ind = min(chunk_start_ind + chunk_size, len(msg_text))
        chunk_text = msg_text[chunk_start_ind:chunk_end_ind]
        bot.send_message(chat_id, chunk_text, **send_message_kwargs)


def send_notifications(level: int, message: str):
    text = f'<b>{logging.getLevelName(level)}</b>\n{message}'
    send_long_message(TG_BOT, TG_CHAT_ID, text, parse_mode='HTML')


def alert(args, level: int, message: str):
    if args.tg:
        send_notifications(level, message)


def main():
    args, cmd = parse_args()
    print(args, cmd)
    if args.shell:
        cmd = ' '.join(cmd)
    logging.info(f'Will run alert_wrapper({args}): `{cmd}`')

    try:
        kwargs = dict(stdout=sp.PIPE, stderr=sp.PIPE)
        if args.shell:
            kwargs['shell'] = True
        cmd_proc = sp.run(cmd, **kwargs)
        logging.info(f'`{cmd}` exited with {cmd_proc.returncode} return code')
        logging.info(f'Stdout:\n{cmd_proc.stdout.decode("utf-8")}')
        logging.info(f'Stderr:\n{cmd_proc.stderr.decode("utf-8")}')
    except KeyboardInterrupt:
        logging.info('Stopped by Ctrl-C')
        sys.exit(0)
    except Exception as error:
        cmd_str = ' '.join(cmd) if isinstance(cmd, list) else cmd
        error_msg = '\n'.join([
            f'<code>{cmd_str}</code>',
            error,
        ])
        alert(args, logging.ERROR, error_msg)
        sys.exit(1)

    if cmd_proc.returncode != 0:
        cmd_str = ' '.join(cmd) if isinstance(cmd, list) else cmd
        error_msg = '\n'.join([
            f'<code>{cmd_str}</code>',
            f'Command returned non-zero exit status {cmd_proc.returncode}',
            f'- stdout:\n<code>{cmd_proc.stdout.decode("utf-8").strip()}</code>',
            f'- stderr:\n<code>{cmd_proc.stderr.decode("utf-8").strip()}</code>',
        ])
        alert(args, logging.ERROR, error_msg)
        sys.exit(cmd_proc.returncode)


if __name__ == '__main__':
    main()
